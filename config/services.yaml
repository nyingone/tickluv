# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'fr_FR'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # Need a listener class to load data into the calendar and register it as a service
    # the listener must be called when the event calendar.set-data is launchd 
    # App\EventListener\CalendarListener: 
    # Comment on 20191001
         #tags: 
            # - { name: 'kernel.event_listener', event: 'calendar.set_data', method: load }

    Symfony\Component\HttpFoundation\Session\Storage\Handler\PdoSessionHandler:
        arguments:
             # - 'mysql:dbname=mydatabase; host=myhost; port=myport'
             # - { db_username: myuser, db_password: mypassword }
            - !service { class: PDO, factory: ['@database_connection', 'getWrappedConnection'] }
            # If you get transaction issues (e.g. after login) uncomment the line below
            # - { lock_mode: 1 }

    
    # TickLuv/mailer 
    App.Services.Email.application_mailer:
        class: App\src\Services\Email\ApplicationMailer
        arguments:
        - "@mailer"

    App.Services.Banner.HTMLMockUpBanner:
        class: App\Services\Banner\HTMLMockUpBanner

    App.Services.Banner.MockUpListener:
        class: App\Services\Banner\MockUpListener
        arguments:
            ['@App.Services.Banner.HTMLMockUpBanner' , '2019-10-31']
        tags:
            - { name: kernel.event_listener, event: kernel.response, method: processMockup }
     
        



    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
